function test = modifyNorneTest(test,caseNo)
% Modify the well setup of the norne_simple_wo case
%
% SYNOPSIS:
%    testCase = modifyNorneTest(testCase, caseNo)
%
% DESCRIPTION:
%    The function takes the test case generated by the setup function
%    'norne_simple_wo' as and makes one out of four possible modifications
%    to the well controls, depending on the value of caseNo:
%       0 - no modification
%       1 - 25% random perturbation of well rates and 10% perturbation of
%           bhp controls
%       2 - shut in the dominant producer (P1) after 2/3 of the simulation
%           time (8 years)
%       3 - convert injectors I1/I2 to producers and shut in P1
%       4 - shut in P1 during the middle third of the simulation horizon
%           (i.e., in the period from year 4 to year 8)
%
% INPUT PARAMETERS:
%    test   - instance of the TestCase class, which most originally have
%             been created using the 'norne_simple_wo' setup function
%    caseNo - number of the test case, 0 to 4
%
% RETURNS:
%    test   - a modified instance of the TestCase class
%
% EXAMPLE:
%    % Load a standard Norne test case and perturb the rates by 25% and the
%    % bottom-hole pressure controls by 5%
%    test = TestCase('norne_simple_wo');
%    test = modifyNorneTest(test, 3);

%{
Copyright 2009-2024 SINTEF Digital, Mathematics & Cybernetics.

This file is part of The MATLAB Reservoir Simulation Toolbox (MRST).

MRST is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

MRST is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with MRST.  If not, see <http://www.gnu.org/licenses/>.
%}

switch caseNo
    case 0
        % do nothing
    case 1 % Random perturbation of the controls
        rng(499);
        test.name = 'test1';
        W = test.schedule.control.W;
        for i=1:numel(W)
            switch W(i).type
                case 'rate'
                    W(i).val = (.5 + rand)*W(i).val;
                case 'bhp'
                    W(i).val = (.9 + 0.2*rand)*W(i).val;
            end
        end
        test.schedule.control.W = W;     
        
    case 2 % Shut down P1 after 2/3 of the simulation
        test.name = 'test2';
        test.schedule.step.control(2*end/3:end) = 2;
        test.schedule.control(2) = test.schedule.control(1);
        test.schedule.control(2).W(7).status = false;

    case 3 % Convert I1/I2 to producers, shut in P1
        test.name = 'test3';
        W = test.schedule.control.W;
        for i=1:2
            W(i).type  = W(7).type;
            W(i).val   = W(7).val;
            W(i).name  = ['P' W(i).name];
            W(i).compi = W(7).compi;
            W(i).sign  = W(7).sign;
        end
        W(7).status = false;
        test.schedule.control.W = W;

    case 4 % Shut down P1 from 1/3 to 2/3 of the simulation
        test.name = 'test4';
        test.schedule.step.control(end/3:2*end/3) = 2;
        test.schedule.control(2) = test.schedule.control(1);
        test.schedule.control(2).W(7).status = false;
end
end
